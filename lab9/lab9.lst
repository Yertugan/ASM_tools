     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose, scanf, printf             
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ;Read a string of unsigned numbers in base 10 from keyboard. Determine the minimum value of the string and write it in the file min.txt (it will be created) in 16 base.
    18 00000000 456E746572206E756D-         message db "Enter numbers: ", 0 
    18 00000009 626572733A2000     
    19 00000010 6D696E2E74787400            file_name db "min.txt", 0
    20 00000018 7700                        access_mode db "w", 0
    21 0000001A FFFFFFFF                    file_descriptor dd -1
    22                                     
    23 0000001E 00000000                    n dd 0 
    24                                      
    25 00000022 256400                  	format db "%d", 0
    26 00000025 257800                      format2 db "%x", 0
    27 00000028 63000000                    min dd 99
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                  
    32                                      ; findmin:
    33                                          ; cmp edx, ebx 
    34                                          ; jae first
    35                                          ; jmp second
    36                                                  
    37                                          ; first:
    38                                              ; mov eax, edx
    39                                              ; jmp finish
    40                                                      
    41                                          ; second:
    42                                              ; mov eax, ebx
    43                                                  
    44                                          ; finish:
    45                                              ; mov dword [esp+4], eax
    46                                                  
    47                                          ; ret 
    48                                      
    49                                      findmin:
    50 00000000 39C2                            cmp edx, eax 
    51 00000002 7202                            jb first
    52 00000004 EB04                            jmp second
    53                                          
    54                                          first:
    55 00000006 89D0                                mov eax, edx
    56 00000008 EB02                                jmp finish
    57                                              
    58                                          second:
    59 0000000A 89D8                                mov eax, ebx
    60                                          
    61                                          finish:
    62 0000000C 89442404                            mov dword [esp+4], eax
    63                                          
    64 00000010 C3                              ret 
    65                                      start:
    66                                          
    67                                          
    68                                          
    69 00000011 B964000000                      mov ecx, 100
    70                                          
    71 00000016 68[00000000]                    push dword message ; ! on the stack is placed the address of the string, not its value
    72 0000001B FF15[00000000]                  call [printf]      ; call function printf for printing
    73 00000021 83C404                          add esp, 4 * 1   
    74                                          
    75 00000024 68[1E000000]                    push dword n
    76 00000029 68[22000000]                    push dword format
    77 0000002E FF15[00000000]                  call [scanf]       ; call function scanf for reading
    78 00000034 83C408                          add esp, 4 * 2 
    79 00000037 8B1D[1E000000]                  mov ebx, [n]
    80 0000003D 89D8                            mov eax, ebx
    81                                          
    82                                          repeta:
    83 0000003F 68[1E000000]                        push dword n       ; ! addressa of n, not value
    84 00000044 68[22000000]                        push dword format
    85 00000049 FF15[00000000]                      call [scanf]       ; call function scanf for reading
    86 0000004F 83C408                              add esp, 4 * 2
    87                                              
    88 00000052 8B15[1E000000]                      mov edx, [n]
    89 00000058 81FAFE000000                        cmp edx, 254
    90 0000005E 7408                                je final1   
    91 00000060 52                                  push edx
    92                                              
    93 00000061 E89AFFFFFF                          call findmin 
    94                                              
    95                                              
    96 00000066 E2D7                                loop repeta
    97                                              
    98                                          final1:
    99                                          
   100 00000068 58                              pop eax
   101 00000069 A3[1E000000]                    mov [n], eax
   102                                          
   103 0000006E 68[18000000]                    push dword access_mode     
   104 00000073 68[10000000]                    push dword file_name
   105 00000078 FF15[00000000]                  call [fopen]
   106 0000007E 83C408                          add esp, 4*2                ; clean-up the stack
   107                                  
   108 00000081 A3[1A000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
   109                                          
   110                                          ; check if fopen() has successfully created the file (EAX != 0)
   111 00000086 83F800                          cmp eax, 0
   112 00000089 7429                            je final
   113                                          
   114 0000008B FF35[1E000000]                  push dword [n]
   115                                           
   116 00000091 68[25000000]                    push dword format2
   117 00000096 FF35[1A000000]                  push dword [file_descriptor]
   118 0000009C FF15[00000000]                  call [fprintf]
   119 000000A2 83C40C                          add esp, 4*3
   120                                          
   121                                          
   122                                          
   123 000000A5 FF35[1A000000]                  push dword [file_descriptor]
   124 000000AB FF15[00000000]                  call [fclose]
   125 000000B1 83C404                          add esp, 4
   126                                          
   127                                          ; findmin:
   128                                              ; mov al, [sir]
   129                                              ; cmp al, [min]
   130                                              ; jb swap ;if al < minimum
   131                                                  
   132                                          ; swap:
   133                                              ; mov [min], al
   134                                              ; loop findmin
   135                                              ; ret 4 
   136                                          
   137                                          final:
   138                                          
   139                                          ; exit(0)
   140 000000B4 6A00                            push dword 0      ; push the parameter for exit onto the stack
   141 000000B6 FF15[00000000]                  call [exit]       ; call exit to terminate the program

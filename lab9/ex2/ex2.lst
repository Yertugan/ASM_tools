     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose, scanf              
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  
    14                                  %include "findmin.asm"
     1                              <1> %ifndef _FINDMIN_ASM_ ; continue if _FACTORIAL_ASM_ is undefined
     2                              <1> %define _FINDMIN_ASM_ ; make sure that it is defined
     3                              <1>                         ; otherwise, %include allows only one inclusion
     4                              <1> 
     5                              <1> ;define the function
     6                              <1> findmin:
     7 00000000 39DA                <1> 	cmp edx, ebx 
     8 00000002 7302                <1>     jae first
     9 00000004 EB04                <1>     jmp second
    10                              <1>     
    11                              <1>     first:
    12 00000006 89D0                <1>         mov eax, edx
    13 00000008 EB02                <1>         jmp finish
    14                              <1>         
    15                              <1>     second:
    16 0000000A 89D8                <1>         mov eax, ebx
    17                              <1>     
    18                              <1>     finish:
    19 0000000C 89442404            <1>         mov dword [esp+4], eax
    20                              <1>     
    21 00000010 C3                  <1>     ret 
    22                              <1> 
    23                              <1> %endif
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ;Read a string of unsigned numbers in base 10 from keyboard. Determine the minimum value of the string and write it in the file min.txt (it will be created) in 16 base.
    18 00000011 6D696E2E74787400             file_name db "min.txt", 0
    19 00000019 7700                        access_mode db "w", 0
    20 0000001B FFFFFFFF                    file_descriptor dd -1
    21                                     
    22 0000001F 00000000                    n dd 0 
    23 00000023 FF000000                    min dd 255
    24 00000027 256400                  	format db "%d", 0
    25 0000002A 257800                      format2 db "%x", 0
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30 00000000 B964000000                      mov ecx, 100
    31                                          
    32 00000005 68[1F000000]                    push dword n
    33 0000000A 68[27000000]                    push dword format
    34 0000000F FF15[00000000]                  call [scanf]       ; call function scanf for reading
    35 00000015 83C408                          add esp, 4 * 2 
    36 00000018 8B1D[1F000000]                  mov ebx, [n]
    37                                          
    38                                          repeta:
    39 0000001E 68[1F000000]                        push dword n       ; ! addressa of n, not value
    40 00000023 68[27000000]                        push dword format
    41 00000028 FF15[00000000]                      call [scanf]       ; call function scanf for reading
    42 0000002E 83C408                              add esp, 4 * 2
    43                                              
    44 00000031 8B15[1F000000]                      mov edx, [n]
    45 00000037 81FAFF000000                        cmp edx, 255
    46 0000003D 7408                                je final1   
    47                                              
    48 0000003F 52                                  push edx
    49 00000040 E8(00000000)                        call findmin  
    50                                              
    51 00000045 E2D7                                loop repeta
    52                                              
    53                                          final1:
    54                                          
    55 00000047 58                              pop eax
    56 00000048 A3[1F000000]                    mov [n], eax
    57                                          
    58 0000004D 68[19000000]                    push dword access_mode     
    59 00000052 68[11000000]                    push dword file_name
    60 00000057 FF15[00000000]                  call [fopen]
    61 0000005D 83C408                          add esp, 4*2                ; clean-up the stack
    62                                  
    63 00000060 A3[1B000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    64                                          
    65                                          ; check if fopen() has successfully created the file (EAX != 0)
    66 00000065 83F800                          cmp eax, 0
    67 00000068 7429                            je final
    68                                          
    69 0000006A FF35[1F000000]                  push dword [n]
    70                                           
    71 00000070 68[2A000000]                    push dword format2
    72 00000075 FF35[1B000000]                  push dword [file_descriptor]
    73 0000007B FF15[00000000]                  call [fprintf]
    74 00000081 83C40C                          add esp, 4*3
    75                                          
    76                                          
    77                                          
    78 00000084 FF35[1B000000]                  push dword [file_descriptor]
    79 0000008A FF15[00000000]                  call [fclose]
    80 00000090 83C404                          add esp, 4
    81                                          
    82                                          
    83                                          
    84                                          final:
    85                                          
    86                                          ; exit(0)
    87 00000093 6A00                            push dword 0      ; push the parameter for exit onto the stack
    88 00000095 FF15[00000000]                  call [exit]       ; call exit to terminate the program

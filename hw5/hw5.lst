     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;A byte string S is given. Obtain the string D by concatenating the elements found on the even positions of S and then the elements ;found on the odd positions of S. 
    14                                      ;Example:
    15                                      ;S: 1, 2, 3, 4, 5, 6, 7, 8
    16                                      ;D: 1, 3, 5, 7, 2, 4, 6, 8
    17 00000000 3132333435363738            s db '1','2','3','4','5','6','7','8'
    18                                      l equ $-s
    19 00000008 00<rept>                    d times l db 0  
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          
    25 00000000 B904000000                      mov ecx, l/2
    26 00000005 BE[00000000]                    mov esi, s ; offset source
    27 0000000A BF[08000000]                    mov edi, d ; offset dest
    28 0000000F FC                              cld
    29                                          
    30 00000010 E312                            jecxz end_prog
    31                                          
    32                                          
    33                                          putodd:
    34 00000012 A4                                  movsb ;lodsb and stosb
    35                                              ;mov al, [esi]
    36                                              ;inc esi
    37                                              ;mov [edi], al
    38                                              ;inc edi
    39 00000013 46                                  inc esi
    40                                          
    41 00000014 E2FC                            loop putodd
    42 00000016 B904000000                      mov ecx, l/2
    43 0000001B BE[00000000]                    mov esi, s
    44                                          puteven:
    45 00000020 46                                  inc esi
    46 00000021 A4                                  movsb
    47                                          
    48 00000022 E2FC                            loop puteven
    49                                          end_prog:    
    50                                          
    51                                      
    52                                          ; exit(0)
    53 00000024 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000026 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Transform all the uppercase letters from the given text in
    16 00000000 746573742E74787400          file_name db "test.txt", 0   ; filename to be created
    17 00000009 7700                        access_mode db "w", 0       ; file access mode:
    18                                                                  ; w - creates an empty file for writing
    19 0000000B FFFFFFFF                    file_descriptor dd -1       ; variable to hold the file descriptor
    20 0000000F 48656C6C4F31323300          text db "HellO123", 0  ; text to be write to file
    21                                      len equ $-text
    22 00000018 00<rept>                    d times len db 0
    23                                      
    24 00000021 20                          min db 32
    25 00000022 40                          max db 64
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; call fopen() to create the file
    30                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    31                                          ; eax = fopen(file_name, access_mode)
    32 00000000 68[09000000]                    push dword access_mode     
    33 00000005 68[00000000]                    push dword file_name
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    36                                  
    37 00000013 A3[0B000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    38                                          
    39                                          ; check if fopen() has successfully created the file (EAX != 0)
    40 00000018 83F800                          cmp eax, 0
    41 0000001B 744A                            je final
    42                                  
    43                                          ; write the text to file using fprintf()
    44                                          ; fprintf(file_descriptor, text)
    45                                          
    46 0000001D B909000000                      mov ecx, len ; we put the length len in ECX in order to make the loop
    47 00000022 BE00000000                      mov esi, 0     
    48 00000027 E33E                            jecxz final 
    49                                  
    50                                          check:
    51 00000029 8A86[0F000000]                      mov al, [text+esi]
    52 0000002F 3A05[22000000]                      cmp al, [max]
    53 00000035 7F00                                jg tolower
    54                                              
    55                                          tolower:  
    56 00000037 B320                                mov bl, 'a'-'A' 
    57 00000039 00D8                                add al, bl             
    58 0000003B 8886[18000000]                      mov [d+esi], al    
    59 00000041 46                                  inc esi
    60                                              
    61 00000042 E2E5                            loop check
    62                                          
    63                                          
    64 00000044 68[18000000]                    push dword d
    65 00000049 FF35[0B000000]                  push dword [file_descriptor]
    66 0000004F FF15[00000000]                  call [fprintf]
    67 00000055 83C408                          add esp, 4*2
    68                                  
    69                                          ; call fclose() to close the file
    70                                          ; fclose(file_descriptor)
    71 00000058 FF35[0B000000]                  push dword [file_descriptor]
    72 0000005E FF15[00000000]                  call [fclose]
    73 00000064 83C404                          add esp, 4
    74                                  
    75                                        final:
    76                                      
    77                                          ; exit(0)
    78 00000067 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000069 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
